/*
 * generated by Xtext 2.11.0
 */
package hu.bzolt.webdsl.entity

import com.google.common.base.Strings
import hu.bzolt.webdsl.webDsl.Bool
import hu.bzolt.webdsl.webDsl.Date
import hu.bzolt.webdsl.webDsl.Entity
import hu.bzolt.webdsl.webDsl.EntityRef
import hu.bzolt.webdsl.webDsl.Num
import hu.bzolt.webdsl.webDsl.Text
import hu.bzolt.webdsl.webDsl.WebDslPackage
import org.eclipse.xtext.formatting2.FormatterRequest
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.eclipse.xtext.xbase.formatting2.XbaseFormatter

class EntityFormatter extends XbaseFormatter
{
	def dispatch void format(Entity e, extension IFormattableDocument document)
	{
		e.regionFor.keyword("entity").prepend[noSpace]
		e.regionFor.feature(WebDslPackage.Literals.ABSTRACT_ELEMENT__NAME).prepend[oneSpace]
		interior(
			e.regionFor.keyword("{").surround[newLine],
			e.regionFor.keyword("}").prepend[newLine],
			[indent]
		)
		e.regionFor.keywords(",").forEach [
			prepend[noSpace]
			append[newLine]
		]

		val width = e.attributes.map [
			regionFor.feature(WebDslPackage.Literals.ATTRIBUTE__NAME).endOffset -
				regionForEObject.offset
		].max + 1;
		for (a : e.attributes)
		{
			val region = a.regionFor.feature(WebDslPackage.Literals.ATTRIBUTE__NAME)
			region.append [
				space = Strings.repeat(" ", width - (region.endOffset - a.regionForEObject.offset))
			]
			a.regionFor.keyword(":").append[oneSpace]
			a.regionFor.keyword("list").surround[oneSpace]
			a.regionFor.keyword("of").surround[oneSpace]
			a.type.format
		}
	}

	def dispatch void format(Text t, extension IFormattableDocument document)
	{
		t.regionFor.keyword("with").surround[oneSpace]
		t.regionFor.keyword("length").surround[oneSpace]
		t.regionFor.feature(WebDslPackage.Literals.TEXT__MIN_LENGTH).append[noSpace]
		t.regionFor.feature(WebDslPackage.Literals.TEXT__MAX_LENGTH).prepend[noSpace]
	}

	def dispatch void format(Num n, extension IFormattableDocument document)
	{
		n.regionFor.keyword("in").surround[oneSpace]
		n.regionFor.feature(WebDslPackage.Literals.NUM__MIN).append[noSpace]
		n.regionFor.feature(WebDslPackage.Literals.NUM__MAX).prepend[noSpace]
	}

	def dispatch void format(Bool b, extension IFormattableDocument document)
	{
	}

	def dispatch void format(Date d, extension IFormattableDocument document)
	{
		d.regionFor.keyword("in").surround[oneSpace]
		d.regionFor.keyword("the").surround[oneSpace]
	}

	def dispatch void format(EntityRef er, extension IFormattableDocument document)
	{
		er.regionFor.keyword("flat").prepend[oneSpace]
	}

	def init(FormatterRequest request)
	{
		initialize(request)
	}

	def res()
	{
		reset
	}
}
